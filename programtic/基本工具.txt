14 纯文本的威力
纯文本是跨平台，跨时间（不会过时）的最佳、最简单的表示法，而且易于理解与对比。有一个常见的误解，就是觉得二进制比文本表示要安全，其实这只是更加晦涩难懂而已，要说安全，加密才是正解。
程序源代码、资源文件、html、xml、注册表文件等等，用的都是纯文本，如果你要设计一个自己的文件格式、优先考虑纯文本，除非你有存储空间与效率上的考虑。

15 shell游戏
虽然Windows下的shell不如*nix的强大，但是对于自动化一些日常的操作已经足够了，比如我们经常会用一些bat文件来自动化配置。尤其是，当你配合shell命令和Perl这种超强的文本处理语言，你会觉得如鱼得水。 这两年的代码重构工作中，领教了不少Perl + Shell的威力！

16 强力编辑
用熟用精一种编辑器，的确是相当好的建议。工欲善其事，必先利其器。平时在windows下N++用的比较多一些，最近考虑切换使用一种更强大、跨平台的工具，比如Emacs或者Vi。
其实这个道理可以说的更宽泛一些，对于经常在IDE中工作的人，精通其工作的IDE，如VS就相当有用了，其效率的提升应该是成倍的。

17 源码控制
这个年代，相信只要是写软件的，肯定都用了SCM，我们公司用的是Perforce，很多开源项目用SVN、Mercury、或者git之类的，而CVS有逐渐没落之势。“源码让猫吃了“的情形，只发生在我大学写的程序中~~~

18 调试
关于调试的方法论介绍，扩展阅读可以是这本书《Debugging》:http://book.douban.com/subject/3228993/。
里面“橡皮鸭”这个故事可以作为一个提醒点来提醒自己：在请教别人之前，先把问题向橡皮鸭解释一遍。其实很多时候，当你把问题理顺了，答案也就自然有了。 有过这样的经历吧：当你向同事说完你的问题后，你马上意识到了该如何解决~~~~而此时可能对方那是还没明白你在问什么 --- 这就是橡皮鸭的作用。

19 文本操纵
操纵文本时一种乐趣。这种乐趣是我在发现了perl以及正则表达式的强大后才体会到的。我运行shell命令然后用perl解析其输出；我可以在几分钟内解析30000多个源文件并以一种复杂的方式修改代码。那时，你会觉得自己很强大~~~
很难想象，没有perl和正则表达式的日子，我是怎么过来的。

20 代码生成器
这其实是特殊的文本操纵，目标在于自动化工作与避免重复。Wizard其实就是一种代码生成器，Doxygen也算是一种，虽然其生成的是代码的文档。在工作中，我们做过根据一个原始的reg文件，产生一个头文件，以编译到代码中。