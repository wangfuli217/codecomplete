7 重复的危害
重复的危害在于维护的负担。
DRY原则首先在于拒绝重复；其次在于鼓励可复用性。
总是在一些代码中看到好几份PI常量、ASSERT宏的定义，这种重复是相当低级、不负责任的，为什么不在用之前先搜索一下呢？ 就好像你在论坛提问前，先要搜索一下是否该问题已经问过一样。

8 正交性
不知道为什么造这么一个名词出来，在我看来，这就是独立性，内聚性，就是尽可能的减少组件间的相互依赖。

9 可撤消性
就是抽象性，想在D3D和OpenGL中切换，想在Oracle和SQL Server切替换？用自己的接口封装其基本概念！

10 曳光弹
迭代开发，并通过不断的反馈进行调整。最近在实施的Scrum，其实是同样概念的开发方法。

11 原型与便笺
原型是为了探索，为了验证。原型比较适用于研究型的项目，而曳光弹，则比较适用于方案比较明朗的项目。原型是用完就扔的代码，这里你可以忽略所有规范，为的只是最快的建立验证系统的原型。
其实，在曳光弹方法中，对于一些局部的任务，也可以采用原型方法来验证。

12 领域语言
什么是领域语言，我的感觉就是比以编程语言更加直接、高级的方式来实现功能。我的经验中，用过一些：
    1. 通过一个xml文件来配置系统的UI，系统实现了一个解析器会在运行时解析该文件创建UI
    2. 用一个perl脚本把一个reg文件解析为一个头文件，然后编译进代码中，该解析过程会在prebuild时间中调用
    3. 其实，我觉得通过系统API完成的工作，也算是领域语言。

13 估算
其实，生活中，工作中到处都是估算。你去买个菜大概要多少时间，做个晚饭要多少时间，洗个澡要多少时间~~~~ 完成这个模块的分离要多少时间。 估算需要知道：要完成什么，怎么完成，怎样才算完成。书中有个观点感同身受：你估算的单位会对解读造成影响。（秒？分？。。。还是年）。
要提高估算的能力，关键在于多估算，多反馈。这样有两个好处：
    1. 每次根据你的估算与实际花费，找出差异，你的考虑会越来越全面。
    2. 估过的项目多了，很多时候你就可以依靠之前的经验了。