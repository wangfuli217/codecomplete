代码中的错误多称为 "errors"(错误),"defects"(缺陷),faults(失误).
开发高质量软件产品的最佳途径是精确描述需求,完善设计,并使用高质量的代码编写规范.

同测试一样,调试本身并不是改进代码质量的方法,而是诊断代码缺陷的一种方法。

1.1 调试效率的巨大差异
    经验丰富的程序员找出缺陷所用的时间大约只是缺乏经验的程序员们的1/20
    最好的程序员能够找出最多的错误，最快的找出错误，并且往往能够正确的改正错误。

    通过反复尝试来编程
    
1.2 让你有所收获的缺陷
程序中的错误为你提供了学习很多东西的绝好机会：错误类型？错误原因？引入和构建时错误？
    理解你正在编写的程序
    明确你犯了哪种类型的错误
    从代码阅读者的角度分析代码质量
    审视自己解决问题的方法
    审视自己修正缺陷的方法
调试其实是一片极其富饶的土地,它孕育着你进步的种子

================================================================================
寻找缺陷
调试包括了寻找缺陷和修正缺陷。
1. 科学的调试方法
    1.1 将错误状态稳定下来（bug要可重复，可稳定复现）
    1.2 确定错误的来源 (那个失误 fault)
        a. 收集产生缺陷的相关数据
        b. 分析所收集的数据,并构造对缺陷的假设
        c. 确定怎样去证实或证伪这个假设,可以对程序进行测试或是通过检查代码
        d. 对假设做出最终结论
    1.3 修补缺陷
    1.4 对所修补的地方进行测试
    1.5 查找是否还有类似的错误
    
在调试工作中，让某个不不定期出现的错误有规律地重现几乎是最具挑战性的任务之一。
如果一个错误无法重现，这通常会是一个 1> 初始化错误 2> 一个同时间有关的问题 3> 悬空指针
off-by-one错误

2. 寻找缺陷的一些小建议
    在构造假设时考虑所有的可用数据
    提炼产生错误的测试用例
    自己的单元测试族中测试代码
    采用多种不同的方法重现错误
    用更多的数据生成更多的假设
    利用否定性测试用例的结果
    对可能的假设尝试头脑风暴
    把需要尝试的事情逐条列出
    缩小嫌疑代码的范围
    对之前出现过缺陷的类和子程序保持警惕
    检查最近修改过的代码
    扩展嫌疑代码的范围
    增量式集成
    同其他人讨论问题（小黄鸭调试法！组织语言的时候就理清了，最近改的一个bug就用的这个）
    抛开问题,休息一下
    
--------------------------------------------------------------------------------
蛮力调试，蛮力指的是一种或许会被认为乏味，费神，耗时但能确保最终可以解决问题的方法。 
    1、对崩溃代码的设计和编码进行彻底检查 
    2、抛弃有问题的代码，从头开始设计和编程； 
    3、抛弃整个程序，从头开始设计和编程 
    4、编译代码时生成全部的调试信息 
    5、在最为苛刻的警告级别中编译代码，不放过任何一个细微的编译器警告 
    6、全面执行单元测试，并将新的代码隔离起来单独测试 
    7、开发自动化测试工具，通宵达旦地对代码进行测试 
    8、在调试器中手动地遍历一个大的循环，直到发现错误条件 
    9、在代码中加入打印，显示和其它日志记录语句 
    10、用另一个不同的编译器来编译代码 
    11、在另一个不同的环境里编译和运行程序 
    12、在代码运行不正确的时候，使用能够产生警告信息的特殊库或者执行环境来链接和运行代码 
    13、复制最终用户的完整系统配置信息 
    14、将新的代码分小段进行集成，对每段集成的代码进行完整的测试

--------------------------------------------------------------------------------
语法错误
    语法错误的问题几乎要退出历史舞台了，显示诊断信息方面，编译器做得越来越好。
    1. 不要过分信任编译器信息中的行号，编译器可能没有正确理解问题，或只是简单地执行了一些拙劣的分析。
    2. 不要迷信编译器信息。
    3. 不要轻信编译器的第二条信息，无法找出第二条或第三条错误信息的源头，先把第一条处理，再重新编译。
    4. 分而治之，程序划分为几个部分的方法有助于寻找缺陷，尤其是那些语法错误。
    5. 找出没有配对的注释或引号。
================================================================================
修正缺陷
    1. 在动手之前先要理解问题
    2. 理解程序本身,而不仅仅是问题
    3. 验证对错误的分析
    4. 放松一下（压力大匆忙提交可能会引入新的问题，这条对于系统测试凌晨改bug很适用，欲速则不达）
    5. 保存最初的源代码（方便回滚）
    6. 治本,而不是治标
    7. 修改代码时一定要有恰当的理由
    8. 一次只做一个改动
    9. 检查自己的改动
    10. 增加能暴露问题的单元测试
    11. 搜索类似的缺陷
================================================================================
调试工具
    1. 源代码比较工具
    2. 编译器的警告消息
        - 将编译器的警告级别设置为最高,不放过任何一个错误
        - 用对待错误的态度处理警告
        - 在项目范围内使用统一的编译设置
    3. 增强的语法检查和逻辑检查
    可以使用其他工具对代码进行进一步的检查，这些检查将比编译器所提供的更为全面。静态代码检查工具，lint类，cppcheck scanbuild clang
    4. 执行性能剖测器
    
    5. 测试框架/脚手架
    找出有问题的代码，对其编写测试程序，然后通过运行程序找出问题。
    6. 调试器
    最有效的组合是良好的思维加上优秀的调试器。
    