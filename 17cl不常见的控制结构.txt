# 17 不常见的控制结构
## 17.1 核对表
cc(不常见的控制结构){}
### 17.1.1 核对表：不常见的控制结构

__return__
1. 每一个子程序都仅在有必要的时候才使用return吗？
1. 使用return有助于增强可读性吗？

__递归__
1. 递归子程序中包含了停止递归的代码吗？
1. 子程序用安全计数器来确保孩子程序能停下来吗？
1. 递归只位于一个子程序里面吗？
1. 子程序的递归深度处于程序栈容量可以满足的限度内吗？
1. 递归是实现子程序的最佳方法吗？它要好于简单的迭代吗？

__goto__
1. 是否只有在万不得已的时候才用goto？如果用了goto，是否仅仅是出于增强可读性和可维护性呢？
1. 如果是处于效率因素而使用的goto，那么对这种效率上的提升做出衡量并加以说明了吗？
1. 一个子程序里最多只用了一个goto标号吗？
1. 所有的goto都向前跳转，而不是向后跳转吗？
1. 所有的goto标号都用到了吗？

## 17.2 要点
1. 多个return可以增强程序的可读性和可维护性，同时可以避免产生很深的嵌套逻辑。但是使用它的时候要多加小心
1. 递归能够很优雅地解决一小部分问题。对它的使用也要加倍小心
1. 在少数情况下，goto是编写可读性和可维护性代码的最佳方法。但这种情况非常罕见。除非万不得已，不要使用goto
