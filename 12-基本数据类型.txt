1. 数值概论
    避免使用魔法数字：修改会比较可靠，修改会变得更容易，你的代码变得更可读(循环和递增中的0，1不算魔法数字)
    如果需要，可以使用硬编码的'0'和'1' (数值0和1用于增量、减量和从数组的第一个元素开始循环)
    预防除0；预防malloc realloc calloc申请内存长度等于0.
    尽可能使用显示类型转换 y = x + (float)i;
    避免混合类型的比较
    注意编译器的警告
2. 整数
    -> 检查整数除法：7/10不等于0.7。它总是等于0，或者等于负无穷大，或者等于最接近的整数，或者 
    -> 检查整数溢出:     断言
    -> 检查中间结果溢出: 断言
3. 浮点数
    -> 避免数量级相差巨大的数之间的加减运算：由于精度问题，对于32位浮点数，小心1000000.00 + 0.1得到的结果和期望不同。
如果要把一系列差异巨大的数相加，解决方法是先排序，再从最小值开始加起，这样可以把影响减少到最低限度
    -> 避免直接进行等量比较：应自己编写equals函数判断两者之差是否小于某阈值
    final double ACCEPTABLE_DELTA = 0.00001;
    boolean Equals (double Term1, double Term2) {
        if (Math.abs (Term1 - Terms2) < ACCEPTABLE_DELTA) {
            return true; 
        }
        else {
            return false; 
        }
    }
    
    # if(s==0.0)
    -> 处理舍入误差问题：考虑换用更高精度的类型，或者把浮点数放大n倍用整型类型做计算，
       streamtoread streamtowrite streamtoforward streamtoaccept tcpnumtoconnect unixtoconnect
    -> 使用语言和函数库对特定数据类型的支持
4. 字符和字符串
    避免使用神秘字符和神秘字符串神秘字符
        除了数值所提到的理由之外，还有这些理由：分离字符串到字符串资源文件更容易实现i18n，字符串字面量会占用较多的存储空间
    针对C语言字符串的建议：
      注意字符串指针和字符数组之间的差异：警惕任何包含字符串和等号的表达式；通过命名规则区分变量是字符数组还是字符串指针
      -> 把C-style字符串的长度声明为STRING_LENGTH + 1：统一约定这条规则，有助于减少脑力消耗以及编程失误
      -> 用null初始化字符串以避免无结束符的字符串
      如果内存不是限制性的因素，就用字符数组取代C中的指针
      用strncpy()取代strcpy()以避免无终端的字符串
    字符串前缀 ps 字符数组前缀 ach
    
5. 布尔变量
    -> 用布尔变量对程序加以文档说明
    判断不明
    if((elementIndex < 0) || (MAX_ELEMENTS < elementIndex) || (elementIndex == lastElementIndex)){
    ... 
    }
    判断明确
    finished = (( elementIndex < 0) || (MAX_ELEMENTS < elementIndex));
    repreatedEntry = (elementIndex == lastElementIndex);
    if (finished || repeatedEntry) {
        ...
    }
    -> 用布尔变量来简化复杂的判断
    -> 定义布尔类型
    typedef int BOOLEAN; 
    或者 -> 将枚举类型作为布尔类型的替代方案
    enum Boolean {
    True = 1,
    False = (!True)
    };
6. 枚举类型 是一种允许用英语来描述某一类对象中每一个成员的数据类型。
    -> 提高可读性
    -> 提高可靠性
    -> 简化修改
    -> 检测非法数值
    -> 定义出枚举的第一项和最后一项，以使用于循环边界
    -> 把枚举类型的第一个元素留作非法值
-> 如果你的语言里没有枚举类型
    // set up Country enumerated type
class Country {
     private Country() {}
     public static final Country China = new Country();
     public static final Country England = new Country();
     public static final Country France = new Country();
     public static final Country Germany = new Country();
     public static final Country India = new Country();
     public static final Country Japan = new Country();
     public static final Country Romania = new Country();
}

// set up Output enumerated type 
class  Output{
     private Output() {}
     public static final Output Screen = new Output();
     public static final Output Printer = new Output();
     public static final Output File = new Output();
}

7. 具名常量 一旦赋值以后就不能再修改了。 const 从
    在数据声明中使用具名常量
    用具有适当作用域的变量或类来模拟具名常量
    统一地使用具名常量

8. 数组
    确认所有的数组下标都没有超出数组地边界
    考虑用容器来取代数组，或者将数组作为顺序化结构来处理
    检查数组地边界点
    如果数组是多维的，确认下标的使用顺序是正确的 Array[i][j] Array[j][i]
    提防下标串话 Array[i] Array[j]
    在C中结合ARRAY_LENGTH()宏来使用数组
        #define ARRAY_LENGTH(x) (sizeof(x)/sizeof(x[0]))
9. 自定义数据类型
    易于修改
    避免过多的信息分发
    增加可靠性
    弥补语言的不足