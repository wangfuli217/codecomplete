1. 不要以为你处处显示出“重视代码质量”的态度，就能提高代码质量。
    总有些人，以为自己知道“单元测试”（unit test），“集成测试”（integration test）这样的名词，
就很懂编程，就可以教育其他人。可惜，光有态度和口号是不解决问题的，你还必须有实战的技巧，
深入的见解和智慧，必须切实地知道应该怎么做。
    提高代码质量唯一可行的手段不是写测试，而是反复的提炼自己的思维，写简单清晰的代码。
如果你想真的提高代码质量，我的文章『编程的智慧』是一个不错的出发点。

2. 真正的编程高手不会被测试捆住手脚

3. 在程序和算法定型之前，不要写测试。 编程的智慧』或者『SICP』一类的东西。

4. 不要为了写测试而改变本来清晰的编程方式。

5. 不要测试“实现细节”，因为那等同于把代码写两遍。

6. 并不是每修复一个 bug 都需要写测试。很多公司都流传一个常见的教条，
    就是认为每修复一个 bug，都需要为它写测试，用于确保这个 bug 不再发生。
    
7. 避免使用 mock，特别是多层的 mock。很多人写测试都喜欢用很多 mock，堆积很多层，
以为只有这样才能测试到路径比较深的模块。其实这样不但非常繁琐费事，而且多层的 
mock 往往不能产生足够多样化的输入，不能覆盖各种边界情况。

8. 不要过分重视“测试自动化”，人工测试也是测试。写测试，这个词往往隐含了“自动运行”的含义，
也就是假设了要不经人工操作，完全自动的测试。

9. 避免写太长，太耗时的测试。

10. 一个测试只测试一个方面，避免重复测试。

11. 避免通过比较字符串来进行测试。

12. “测试能帮助后来人”的误区。每当指出测试教条主义的错误，
