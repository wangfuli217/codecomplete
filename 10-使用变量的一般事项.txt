用"变量"一词同时指代对象和内置数据类型，如整数和数组等。
"数据类型"--一词通常是指内置数组类型，而"数据"一词则可能代表对象，也可能代表内置数据类型.


1. 数据认知 : 创建有效数据的第一步是了解所要创建数据的种类。积累大量的数据类型对于程序员来说是至关重要的。
2. 隐式声明
关闭隐式声明: bash(set -u) lua() VB(Option Explicit)
遵循某种命名规则,遵循某种命名的规则，检查变量名。

3. 变量初始化原则 : 
    在声明变量的时候初始化，即在靠近第一次使用变量的位置声明和定义该变量 就近原则(Principle of Proximity)
    在可能的情况下使用final或者const(可以防止该变量在初始化之后再被赋值)
        final和const关键字在定义常量、输入参数以及任何初始化后其值不再发生改变的局部变量时非常有用。
    -> 特别注意计数器和累加器 : i, j, k, sum 和 total 计数器(counter) 累加器(accumulator)
       在下一次使用这个变量之前忘记重置其值也是一种常见错误。
    在类的构造函数里初始化该类的数据成员
    一次性初始化具名常量;用可执行代码来初始化变量(用调用函数的返回值初始化 变量，函数名即变量名)
    使用编译器设置来自动初始化所有变量 crosstool\cheatsheet\ops_doc-master\makefile\gcc.sh  gcc(D) 见rtud中版本信息和X86 ARM控制
    利用编译器的警告信息 crosstool\cheatsheet\ops_doc-master\makefile\gcc.sh  gcc(Warn)
    检查输入参数的合法性
    使用内存访问检查工具来检查错误的指针 内存访问检查工具(memory-access checker) github -fcheck-memory-usage
        Checker 0.9.9.1
        Electric Fence 2.0.5
        Mem-Test 0.10 
        https://www.linuxjournal.com/article/3185
        https://github.com/rm-hull/linux-journal-archive/blob/4a2e1e18d27174397e3dff73ae07d78c0d3c3719/LJ/listings/061/3185postr.c
    在程序开始时初始化工作过内存
        对于 Intel X86 处理器来说，0xCC 是一个不错的数值，因为它是断点终端(int 03h) 的机器码。
        建议使用 0xDEADBEEF 这一常量来填充内存，因为在调试器里很容易识别它

    更小作用域，更小攻击窗口，更小跨度，更小存活时间
4. 作用域: 衡量变量的知名度的方法。变量在程序内的可见和可引用的范围。
    使变量引用局部化 : 把对一个变量的引用局部化，即把引用点尽可能集中在一起总是一种很好的方法。--> 提高可读性
        攻击窗口(window of vulnerability):介于同一变量多个引用点之间的代码. 
    因为一些新的代码可能会增加在窗口中,不当的修改这个变量,增加潜在的风险.
        跨度(span):衡量一个变量的不同引用点的靠近程度的一种方法. 把变量的引用点集中起来的主要好处是提高程序的可读性.
        存活时间(live time):一个变量存在期间所跨越的语句总数.变量的存活时间起始于引用它的第一条语句，结束于引用它的最后一条语句。
    
    长存活时间意味着一个变量经历了很多语句，短存活时间意味着只经历很少的语句，跨度则表明了对一个变量引用的集中程度。
    通过把初始化代码和循环代码放在一起，就减少了由于修改语句而导致初始化错误的可能性。

  减小作用域的一般原则
    1，在循环开始之前再去初始化该循环里使用的变量，而不是在该循环所属的子程序的开始处初始化这些变量
    2，直到变量即将被使用时再为其赋值
    3，开始时采用最严格的可见性，然后根据需要扩展变量的作用域
    4. 把相关语句放在一起 -> 把相关语句提取成单独的子程序。
    
    "方便性"和"智力可管理性"两种概念的区别,归根结底是侧重写程序还是读程序之间的区别。
    
5. 持久性 assert断言或调试代码 NULL
    "持续性"是对一项数据的生命期的另一种描述 "持续性"从短到长：
        特定代码段或子程序的生命期： 循环里声明的变量
        只要你允许,它就会持续下去：new出来的变量
        程序的生命周期：static变量
        永久持续：存到数据库里的变量
    合理的"持续性"能够避免在一个变量正常的生命期结束之后访问它的数据，为了确保生命周期有如下措施：
        调试代码或者断言判断变量取值是否合理
        准备抛弃变量时给它们赋上"不合理的数值"，例如删除一个指针后把它的值设为null
        编写代码时要假设数据并没有持续性
        养成在使用所有数据之前声明和初始化的习惯
    
6. 绑定时间 : 绑定时间越早灵活性就会越差,但复杂度也会越低
    编码时(使用神秘数值)
    编译时(使用具名常量)
    加载时(从 Windows注册表、Java属性文件等外部数据源中读取数据)
    对象实例化时(例如在每次窗体创建的时候读取数据)
    即时(例如在每次窗体重绘的时候读取数据) 
    
采用越晚的绑定时间越会有利；绑定时间越早灵活性会越差，但复杂度也会降低。

7 数据类型和控制结构之间的关系
    序列型数据翻译为程序中的顺序语句：如果你从文件中读取了员工的姓名、社会安全号码、住址、电话号码和年龄
    选择型数据翻译为程序中的if和case语句
    迭代型数据翻译成程序中的for、 repeat、 while等循环结构
    
8 为变量指定单一用途
    每个变量只用于单一用途
    避免让代码具有隐含含义

    把同一个变量用于多个用途的另外一种方式是当变量代表不同事物时让其具有不同的取值集合。
    例如变量pageCount的取值可能表示已打印纸张的数量，除非它等于-1，在这种情况下表明有错误发生。
    应该避免使用具有这种隐含含义的变量，这种滥用被称为混合耦合。
    这样的变量用于两种以上的用途，也就意味着其类型对于其中的任何一项任务而言都是错误的。
    使用两个变量保存两种信息，能带来更多的清晰度。

    3，确保使用了所有已声明的变量 cppcheck   gcc -Wunused