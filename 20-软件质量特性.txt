1. 软件质量的特性
分为内在和外在，外在特性(强调使用)是指用户所能感知到的，包括
    正确性(系统规范，设计和实现方面的错误的稀少程度)，
    可用性(指用户学习和使用一个系统的容易程度)，
    效率(软件是否尽可能少地占用系统资源，包括内存和执行时间)，
    可靠性(指定的必需条件下，一个系统完成所需要功能的能力)，
    完整性(系统阻止对程序或者数据进行未经验证或者不正确访问的能力)。
    适应性(为特定的应用或者环境设计的系统，不做修改的情况下，能够在其它应用或环境中使用的范围)，
    精确性(输出结构的误差程度)，
    健壮性(接收无效输入或者处于压力环境时继续正常运行的能力)。


内在特性包括(强调维护，注意可能与外在特性有重叠):
    可维护性(能够很容易地对象系统进行修改，改变或增加功能，提高性能，以及修正缺陷)，
    灵活性(指假如一个系统是为特定用途或者环境而设计的，那么当该系统被用于其它目的或者环境的时候，需要对系统做修改的程度)，
    可移植性(原来设计的特定环境之外运行，对系统所进行修改的难易程度)，
    可重用性(系统的某些部分可被应用到其它系统中的程度以及此项工作的难易程度)，
    可读性(阅读并理解系统代码的难易程度)，
    可测试性(你可以进行何种程度的单元测试或者系统测试，何种程度上验证系统是否符合需求)，
    可理解性(系统组织和细节语句的层次上理解整个系统的难易程度)。
================================================================================
2. 改善软件质量的技术
软件质量保证是一个需要预先计划的，系统性的活动，其目标就是为了确保系统具备人们所期望的特性。

    2.1 软件质量目标，改善软件质量的一种强有力的方法，就是根据前面章节所提到的各种
外在特性和内在特性，明确定义出软件质量的目标。
    2.2 明确定义质量保证工作，保证质量的工作中，一个最常见的问题是质量被认为是次要目标。
某些组织当中，快速而槽糕的编程已经成了普遍现象。
    2.3 测试策略。执行测试可以为产品的可靠性进行详细的评估。制定一套与产品需求，
架构以及设计相关联的测试策略。
    2.4 软件工程指南，在开发过程中，指南应当控制软件的技术特性，它应当贯彻到所有的开发活动中。
    2.5 非正式技术复查，自行检查自己的工作，非正式复查包括对设计或代码的桌面检查，
和若干同事一起将代码走查一遍。
    2.6 正式技术复查，管理软件过程的工作之一，就是要在低成本的环节里抓出问题。周期性
使用质量门测试或者复查，以检验某一阶段的产品是否已经具备了进入下一阶段前所要求的质量。
    2.7 外部审查，外部审查是一种用于确定一个已开发项目或产品的状态的特殊技术复查方法。

开发过程
    2.1 对变更进行控制的过程，需求变更的失控可能使设计和编码工作前功尽弃；
设计变更的失控会造成代码与需求背离；代码变更的失控则可能造成内部冲突。有效地管理变更是实现高质量的一个关键。
    2.2 结果的量化，质量保证计划的结构经过实际测量，量化结果能告诉你计划成果与否。
    2.3 制作原型，制作原型指开发出系统中关键功能的实际模型。构建原型能产生更完善的设计，
更贴近用户的需求，以及更好的可维护性。

设置目标: 减少内存占用，输出可读性，程序可读性，最少代码量，减少计算时间
    不同目标之间是有冲突的，并且软件通常都不可能在所有方面做得很好。
================================================================================
3.不同质量的保障技术的相对效能
    3.1 缺陷检测率: 非正式设计复查，正式设计检查，非正式代码复查，正式代码检查，
                    建立模型或原型，单元测试，集成测试，回归测试，系统测试，Beta测试
    单独使用任何一个方法，其典型检出率都没有超过75%，平均来说这一数值在40%左右。
    最常用的缺陷方法，单元测试和集成测试，它们的一般检测率仅仅在30%到35%之间。
    如果项目的开发者向更高的缺陷检测率发起冲击，需要综合运用各种技术。
    一旦组合使用任意两者方法，包括让两个独立的小组使用相同的方法，都能将所发现缺陷的总量提高几乎一倍。

    -> 阅读代码能够找出较多的接口缺陷，而功能测试则可以检测出更多的控制缺陷。
    缺陷检测技术: 非正式设计复查，非正式代码复查，单元测试，集成测试，回归测试
    3.2 找出缺陷成本: -> 大部分研究都发现，检查比测试的成本更小。
    3.3 修正缺陷的成本: 缺陷在系统中存在的时间越长，修正缺陷的成本越高。
================================================================================
4. 什么时候进行质量保证工作
错误越早引入到软件当中，问题就会越复杂，修正这个错误的代价也更高，因为错误会牵涉到系统的更多部分。

================================================================================
5. 软件质量的普遍原理
    软件质量的普遍原理就是改善质量以降低开发成本。提高生产效率和改善质量的最佳途径
就是减少花在代码返工上的时间，无论返工的代码是由需求，设计改变还是调试引起的。
    编写无缺陷代码并不一定会比编写富含缺陷的代码花更多时间




