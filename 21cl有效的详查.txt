cc(有效的详查){}
### 21.1.1 核对表：有效的详查
1. 你是否有一个核对表，能让评论员将注意力集中于曾经发生过问题的领域？
1. 你是否专注于找出错误，而不是修正它们？
1. 你是否考虑制定某些视角或场景，以帮助评论员在准备工作的时候集中注意力？
1. 你是否给予评论员足够的时间在详查会议之前进行准备，是否每一个人都做了准备？
1. 是否每一个参与者都扮演一个明确的角色--主持人、评论员以及记录员等？
1. 会议是否以某种高效的速度进行？
1. 会议是否限制在两个小时以内？
1. 是否所有详查会议的参与者都接受了如何进行详查的针对性培训，是否主持人接受了有关主持技巧方面的针对性培训？
1. 是否将每次详查发现的错误数据都收集起来，使你能调整本组织以后使用的核对表？
1. 是否收集了准备速度和详查速度方面的数据，以便你去优化以后的准备和详查工作？
1. 是否每次详查中被指派下去的活动都被正确跟进了，无论是通过主持人自己还是一次重新详查？
1. 管理层是否理解他们不应该参与详查会议？
1. 是否有一个用于保证修正正确性的跟进计划？

## 21.2 要点

1. 协同开发实践往往能比测试发现更多的缺陷，并且更有效率
1. 协同开发实践所发现错误的类型通常跟测试所发现的不同，这意味着你需要同时使用详查和测试来保证你软件的质量
1. 正式检查通过运用核对表、准备工作、明确定义的角色以及对方法的持续改善，将缺陷侦测的效率提升到最高。它往往能比走查发现更多的缺陷
1. 通常，结对编程拥有和详查相同的成本，并能产生质量相当的代码。当需要缩短开发周期的时候，结对编程就非常有价值。相对于单独工作来说，有些开发人员更喜欢结对工作
1. 正式检查可以应用在除代码之外的很多工作成果上，例如需求、设计以及测试用例等
1. 走查和代码阅读是详查的替代方案。代码阅读更富有弹性，能有效利用每个人的时间