1.表驱动法是一种编程模式，从表里面查询信息，而不是通过选择语句逻辑.

从表里面查找信息而不使用逻辑语句，使用表驱动法的两个问题：如何建表？如何查表？
    怎样从表中查询条目：直接访问，索引访问，阶梯方位
    应该在表里存些什么：数据，动作(代码/函数指针)

if((('a' <= inputChar) && (inputChar <= 'z')) || 
(('A' <= inputChar) && (inputChar <= 'Z‘）））{
    charType = CharacterType.Letter;
}else if ((inputChar == ' ') || (inputChar == ',') || (inputChar == '.') || (inputChar == '!') || (inputChar == '(') || (inputChar == ')') || (inputChar == ':') || (inputChar == ';') || (inputChar == '?') || (inputChar == '-')) {
    charType = CharacterType.Punctuation;
} else if (('0' <= inputChar) && (inputChar <= '9')){
    charType = CharacterType.Digit;
}
 -> 使用表驱动法
charType = charTypeTable[ inputChar ];



1.1 直接访问表
如何构造查询键值：-> 以下原则见p424页 (看看更有味)
    复制信息从而能够直接使用键值
    转换键值以使其能够直接使用
    把键值转换提取成独立的子程序
IF(month=1)Then
  days=31
ElseIf(month=2)Then
  days=28
ElseIf(month=3)Then
  days=31
ElseIf(month=4)Then
  days=30
ElseIf(month=5)Then
  days=31
ElseIf(month=6)Then
  days=30
ElseIf(month=7)Then
  days=31
ElseIf(month=8)Then
  days=31
ElseIf(month=9)Then
  days=30
ElseIf(month=10)Then
  days=31
ElseIf(month=11)Then
  days=30
ElseIf(month=12)Then
  days=31
End If
-> 直接索引方法
    DAYS_PER_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    days = DAYS_PER_MONTH[month-1]
    如果考虑闰年，那长长的 if 语句将会变得更加复杂！
    表驱动法依旧简单清晰：
    DAYS_PER_MONTH = {
        False: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        True: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
    }
    days = DAYS_PER_MONTH[is_leap_year][month-1]
    
    表驱动的优势之一就是你可以把表里面的数据存放在文件中，在程序运行时在读取这些数据。
这样一来，就可以在不改动程序本身的情况下调整保险费率等参数。
    使用继承和多态的设计并不一定就是好的设计。
    核心的设计理念既不是面向对象也不是面向功能----而是使用一个经过深思熟虑的查询表。

1.2 索引访问表 -> 以下原则见p426页 (看看更有味)
先用一个基本类型的数据从一张索引表中查出一个键值，然后用这一键值查出你感兴趣的主数据，优点：
    节省内存空间
    操作位于索引中的记录更廉价
    可维护性
    
1.3 阶梯访问表
    表中的记录对于不同的数据范围有效，而不是对于不同的数据点有效。
把每一个区间的上限写入一个表里，然后循环按照各区间的上限来检查分数。
    留心端点
    考虑用二分查找取代顺序查找
    考虑用索引访问来取代阶梯技术
    把阶梯表查询操作提取成单独的子程序
    
    
好代码 //阶梯访问表，二分查找

const char gradeTable[] = {
      'A', 'B', 'C', 'D', 'F'
};//用表把成绩分成五个等级
const int DONWLIMIT_LENGTH = 4;
const int downLimit[] = {
      90, 80, 70, 60
};
int BinarySearch(int score){
    int low = 0;
    int high = DONWLIMIT_LENGTH - 1; //downLimit的最大的Index
    while(low <= high){
        int mid = (low + high) / 2;
        if(score < downLimit[mid]){
            low = mid + 1;
        } else if(score > downLimit[mid]){
            high = mid - 1;
        } else {
            return mid;
        }
    }
    return low;
}