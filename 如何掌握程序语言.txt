1. 对程序语言的各种误解
    1. 程序语言无用论。算法在模块化和可扩展性上面有很大问题。
    2. 追求“新语言”。
    3. “存在即是合理”。
    4. 追求“新特性”。
    5. 追求“小窍门”。
    6. 针对“专门领域”。
    7. 宗教信仰。
2. 如何掌握程序语言
    1. 专注于“精华”和“原理”。就像所有的科学一样，程序语言最精华的原理其实只有很少数几个，
它们却可以被用来构造出许许多多纷繁复杂的概念。
    2. 实现一个程序语言。学习使用一个工具的最好的方式就是制造它，所以学习程序语言的最好方式就是实现一个程序语言。
    
几种常见风格的语言
    面向对象语言
    大部分面向对象语言的设计都遵循一个根本错误的原则：“所有的东西都是对象（Everything is anobject）。
”以至于所有的函数都必须放在所谓的“对象”里面，而不能直接被作为参数或者变量传递。这导致很多时候需要
使用繁琐的设计模式(design patterns) 来达到甚至对于 C 语言都直接了当的事情。
    低级过程式语言: 不高效
    高级过程式语言: (Pascal相比C/C++)
    Pascal不但把人从底层细节里解脱出来，没有面向对象的思维枷锁，而且有一些很好的设计，比如强类型检查，嵌套函数定义等等。
    函数式语言:
    C 的类型系统里面有很多不成熟的设计，导致你需要记住太多不必要的规则。
    逻辑式语言:
    逻辑式语言（比如 Prolog）是一种超越函数式语言的新的思想，所以需要一些特殊的训练。
逻辑式语言写的程序，是能“反向运行”的。普通程序语言写的程序，如果你给它一个输入，
它会给你一个输出。但是逻辑式语言很特别，如果你给它一个输出，它可以反过来给你所有可能的输入。
    



