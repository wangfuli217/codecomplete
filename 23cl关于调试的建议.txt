# 23 调试

## 23.1 核对表
cc23(关于调试的建议){}
### 23.1.1 核对表：关于调试的建议

__寻找缺陷的方法__
1. 使用所有可用数据来构造你的假设
1. 不断提炼产生错误的测试用例
1. 在自己的单元测试族中测试代码
1. 借助可以获得的任何工具
1. 用不同的方式重现错误
1. 通过产生更多的数据来构造更多的假设
1. 利用证伪假设的测试结果
1. 用头脑风暴的方式找出可能的假设
1. 在桌上放一个记事本，把需要尝试的事情列出来
1. 缩小被怀疑有问题的代码区域
1. 对之前出现过问题的类和子程序保持警惕
1. 检查最近修改的代码
1. 扩展被怀疑有问题的代码区域
1. 采用增量集成
1. 检查常见的缺陷
1. 和其他人一起讨论你的问题
1. 抛开问题休息一下
1. 在使用快速肮脏调试法的时候，要设一个时间上限
1. 列出所有的蛮力调试方法，逐条应用

__解决语法错误的方法__
1. 不要太信任编译器信息中给出的行号
1. 不要太信任编译器信息
1. 不要太信任编译器所给出的第二条出错信息
1. 分而治之，各个击破
1. 使用具有语法分析功能的编译器来找出位置错误的注释和引号

__修正缺陷的方法__
1. 在动手之前先理解程序
1. 理解整个程序而非具体问题
1. 验证对错误的分析
1. 放松一下
1. 要保存最初的源代码
1. 治本，而非治标
1. 只有当理由充分的时候才去修改代码
1. 一次只做一个改动
1. 检查自己所做的修订
1. 添加单元测试来暴露代码中的缺陷
1. 找出类似的缺陷

__调试的一般方法__
1. 你是否会把调试看做是能让你更好地理解程序、错误、代码质量和解决问题方法的良机？
1. 你是否会避免采用随机尝试查找错误或迷信式的调试方法？
1. 你是否假设错误时你自己造成的？
1. 你是否使用了科学的方法将间接性的错误稳定下来？
1. 你是否使用了科学的方法来寻找缺陷？
1. 你在寻找缺陷的时候会使用多种不同的方法么？还是每次都是用相同的方法？
1. 你会验证你的修改是否正确吗？
1. 你会在调试中使用编译器警告信息、执行性能分析、利用测试框架和交互测试方法么？

## 23.2 要点

1. 调试同整个软件开发的成败息息相关。最好的解决之道是使用本书中介绍的其他方法来避免缺陷的产生。然而，花点时间来提高自己的调试技能还是很划算的，因为优秀和拙劣的调试表现之间的差距至少是10：1
1. 要想成功，系统化查找和改正错误的方法至关重要。要专注于你的调试工作，让每一次测试都能让你朝着正确的方向前进一步。要使用科学的调试方法
1. 在动手解决问题之前，要理解问题的根本。胡乱猜测错误的来源和随机修改将会让你的程序陷入比刚开始调试时更为糟糕的境地
1. 将编译器警告级别设置为最严格，把警告信息所报告的错误都改正。如果你忽略了明显的错误，那么要改正那些微妙的错误就会非常麻烦
1. 调试工具对软件开发而言是强有力的支持手段。找出这些工具并加以应用，当然，请记得在调试的时候开动脑筋
