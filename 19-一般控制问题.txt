读代码先读主流程; 用决策表代替复杂的条件

1.1. 布尔表达式
    用true和false做布尔判断，隐式地比较布尔值与true和false: 
    -> 在布尔表达式中用标识符true和false,而不要用0和1等数值。(有的语言甚至不允许你为布尔变量赋true或false以外的值)
Dim printerError As Integer
Dim reportSelected As Integer
Dim summarySelected As Integer
...
If printerError = 0 Then InitializePrinter ()
If printerError = 1 Then NotifyUserOfError ()

If reportSelected = 1 Then PrintReport ()
If summarySelected = 1 Then PrintSummary ()

If printerError = 0 Then CleanupPrinter ()
-> 优化
Dim printerError As Boolean
Dim reportSelected As ReportType
Dim summarySelected As Boolean
...
If ( Not printerError ) Then InitializePrinter ()
If ( printerError ) Then NotifyUserOfError ()

If ( reportSelected = ReportType_First ) Then PrintReport ()
If ( summarySelected ) Then PrintSummary ()

If ( Not printerError ) Then CleanupPrinter ()

    隐式地比较布尔值与true false
while(done == false)...
while((a>b) == true)...
-> 优化
while(not done)...
while(a > b)...
--------------------------------------------------------------------------------
1.2. 简化复杂的表达式
    拆分复杂的判断并引入新的布尔变量
    -> 与其写一个庞大的、具有很多项的复杂判断，还不如把中间结果赋值给变量，-> 理解简单
    
    把复杂的表达式做成布尔表达式。
    -> 如果某项判断需要重复做, 或者会搅乱对程序主要流程的理解, 那么可以把该判断的代码提取成一个函数, 然后判断该函数的返回值
If ( ( document.AtEndOfStream ) And ( Not inputError ) ) And _
  ( ( MIN_LINES <= lineCount ) And ( lineCount <= MAX_LINES ) ) And _
  ( Not ErrorProcessing( ) ) Then
 ' do something or other
...
End if
-> 优化
If ( DocumentIsValid( document, lineCount, inputError ) ) Then
' do something or other
...
End If
    用决策表代替复杂的条件 (decision-table)
--------------------------------------------------------------------------------
1.3. 编写肯定形式的布尔表达式
# 否定形式的判断 (statusOK 替换成 ErrorDetected)
If ( ！statusOK ) (
  // do something
 ...
 )
else (
 // do something else
 ...
 )

-> 优化: 变肯定后的判断

If ( statusOK ) (
// do something else
...
)
else (
 // do something
 ...
 )
狄摩根定理
--------------------------------------------------------------------------------
1.4. 用括号使布尔表达式更清晰
if ( a < b == c == d ) ...
-> 优化
if ( （ a < b ） == （ c == d ) ） ...

--------------------------------------------------------------------------------
1.5. 理解布尔表达式是如何求值的 (短路求值)
while ( i < MAX_ELEMENTS and item[ i ] <> 0 )...
-> 优化
while ( i < MAX_ELEMENTS )
if ( item[ i ] <> 0 ) then
...
    -> 使用嵌套的判断语句来明确你的用意，而不要依赖求值顺序和短路求值。
--------------------------------------------------------------------------------
1.6. 按照数轴的顺序编写数值表达式
    从左到右，从小大大。"min < x & x < max" 比 "x > min & max > x"更容易理解。

--------------------------------------------------------------------------------
1.7. 与0比较的指导原则
编程语言把0用做很多目的。0是一个数值,
                          是字符串中的零终止符,
                          是空指针的取值,
                          是枚举的第一个元素的取值,
                          是逻辑表达式中的false既然它有 
写的代码中就应该彰显0的特定用法。
隐式地比较逻辑变量                         while(!done)
把数和0相比较(表达变量数据类型)            while(balance != 0)
C中显示第比较字符和零终止符                while( *charptr != '\0')
把指针与NULL相比较(C++11推荐使用nullptr)   while( ptr!= NULL )
--------------------------------------------------------------------------------
1.8. 布尔表达式的常见问题
C家族语言中,应该把常量放在比较的左端（通过编译器报错来避免误把“==”写成“=”）
if( MIN_ELEMENTS = i ) 错误
if( i = MIN_ELEMENTS ) 告警

================================================================================
2.1 用括号来把条件表达清楚
    -> 用块来清楚地表达你的用意，无论块内的代码行数是1还是20
================================================================================
3.1 空语句
C++中一个 ";"就是一个空语句，可以用来占位，如while后必须有一条语句，可以用";"。
    为空语句创建一个 DoNothing()预处理宏或者内联函数(说明确实什么都不想做)
    考虑如果换用一个非空的循环体,是否会让代码更清晰
    -> DoNothing表明你已经考虑了这种case，并且的确不需要对该case做什么操作
    
================================================================================
4.1 驯服危险的深层嵌套
    通过重复检测条件中的某一部分来简化嵌套的if语句
if (inputStatus == InputStatus_Success){
//lots of code
...
if (printerRoutine != NULL){
    //lots of code
    ...
    if (SetupPage()){
        //lots of code
        ...
        if(AllocMem(& printDate)){
            //lots of code
        }
    }
}
}
-> 利用重复检测的非嵌套代码
if (inputStatus == InputStatus_Success){
    //lots of code
    ...
    if (printerRoutine != NULL){
        //lots of code
        ...
    }
}
if ((inputStatus == InputStatus_Success)&&(printerRoutine != NULL)
    &&SetupPage()){
    //lots of code
    ...
    if(AllocMem( &printDate)){
        //lots of code
        ...
    }
}
-> 把嵌套if转换成case语句
do{
    if (inputStatus != InputStatus_Success){
        break;
    }
    if (printerRoutine == NULL){
        break;
    }
    if (!SetupPage()){
        break;
    }
    if(!AllocMem(& printDate)){
            break;
    }
    
}while(false)
-> 把嵌套if转换成一组if-then-else语句
if (10 < quantity){
    if(100 < quantity）{
        if(1000 < quantity){
            discount = 0.01;
            }
        else{
            discount = 0.05;
        }
        }
    else{
        discount = 0.025;
    }
else{
    discount = 0.0
}
-> 优化
if(1000<quantity){
   discount=0.01;
}else if((100<quantity)&&(quantity<=1000)){
   discount=0.05;
}else if((10<quantity)&&(quantity<=100)){
   discount=0.025;
}else if(quantity<=10){
   discount=0;
}
-> 把深层嵌套的代码抽取出来放进单独的子程序。
-> 使用一种面向对象的方法
-> 重新设计深层嵌套的代码
    深层嵌套是一个警告，当然，这并不意味着你一定要修改这个子程序，如果不修改的话，能提出一个好的理由。
    
用状态变量重写代码
用防卫子句来退出子程序,从而使代码的主要路径更为清晰
使用异常

================================================================================
5.1 结构化编程: 顺序，选择，迭代
使用break continue return thorw-catch 都要持一种批判的态度

6.1 控制结构和复杂度
决策点的计算方式：
(1) 决策点初始值为1；
(2) 遇到一次if，while，repeat，for，and，or决策点就加1
(3) Case语句中的每一种情况加1

处理复杂度的度量结果
(1) 0-5 子程序可能还不错
(2) 6-10 得想办法简化子程序了
(3) 10+ 把子程序的某一部分拆分成另一个子程序并调用它


