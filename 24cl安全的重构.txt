cc24(安全的重构){}
1. 每一改变都是系统改变策略的一部分么？
1. 在重构之前，你保存了初始的代码了么？
1. 你是否保持较小的重构步伐？
1. 你是否同一时间只处理一项重构？
1. 在重构时你是否把要做的事情一条条列出来？
1. 你是否设置了一个停车场，把你在重构时所想到的任何东西记下来？
1. 在每次重构后你会重新测试么？
1. 如果所作的修改非常复杂，或者影响到了关键代码，你会重新检查这些修改么？
1. 你是否考虑过特定的重构风险，并以此来调整你的重构方法？
1. 你所做的修改是提升还是降低了程序的内在质量？
1. 你是否避免了将重构作为先写后改的代名词，或者作为拒绝重写拙劣代码的托词？

## 24.2 要点

1. 修改是程序一生都要面对的事情，不仅包括最初的开发阶段，还包括首次发布之后
1. 在修改中软件的质量要么改进，要么恶化。软件演化的首要法则就是代码演化应当提升程序的内在质量
1. 重构成功之关键在于程序员应该学会关注那些标志着代码需要重构的众多警告或“代码臭味”
1. 重构成功的另一要素是程序员应当掌握大量特定的重构方法
1. 重构成功的最后要点在于要有安全重构的策略。一些重构方法会比其他重构方法要好
1. 开发阶段的重构是提升程序质量的最佳时机，因为你可以立即让刚刚产生的改变梦想变成现实。请珍惜这些开发阶段的天赐良机
