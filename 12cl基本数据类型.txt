# 12 基本数据类型
## 12.1 核对表
cc(基本数据类型){}
### 12.1.1 核对表：基本数据类型

__数值概论__
1. 代码中避免使用神秘数字吗？
1. 代码考虑了除零错误吗？
1. 类型转换很明显吗？
1. 如果在一条语句中存在两个不同类型的变量，那么这条语句会像你期望的那样求值吗？
1. 代码避免了混合类型比较吗？
1. 程序编译时没有警告信息吗？

__整数__
1. 使用整数除法的表达式能按预期的那样工作吗？
1. 整数表达式避免整数溢出的问题了吗？

__浮点数__
1. 代码避免了对数量级相差巨大的数字做加减运算吗？
1. 代码系统地组织了舍入错误的发生吗？
1. 代码避免对浮点数做等量比较吗？

__字符和字符串__
1. 代码避免使用神秘字符和神秘字符串吗？
1. 使用字符串时避免了off-by-one错误吗？
1. C代码把字符串指针和字符数组区别对待了吗？
1. C代码遵循了把字符串声明为CONSTANT+1长度的规则了吗？
1. C代码在适当的时候用字符数组来代替指针了吗？
1. C代码把字符串初始化为NULL来避免无终端的字符串了吗？
1. C代码用strncpy()代替strcpy()吗？strncat()和strncmp()呢？

__布尔变量__
1. 程序用额外的布尔变量来说明条件判断了吗？
1. 程序用额外的布尔变量来简化条件判断了吗？

__枚举类型__
1. 程序用枚举类型而非具名常量来提高可读性和可修改性吗？
1. 当变量的用法不能仅用true和false表示的时候，程序用枚举类型来取代布尔变量吗？
1. 针对枚举类型的测试检测了非法数值吗？
1. 把枚举类型的第一项条目保留为“非法的”了吗

__具名常量__
1. 程序用具名常量而不是神秘数值来声明数据和表示循环界限吗？
1. 具名常量的使用一致吗？--没有在有些位置使用具名常量又在其他位置使用文字量？

__数组__
1. 所有的数组下标都没有超出数组边界吗？
1. 数组引用没有出现off-by-one错误吗？
1. 所有多维数组的下标的顺序都正确吗？
1. 在嵌套循环里，把正确的变量用于数组下标来避免循环下标串话了吗？

__创建类型__
1. 程序对每一种可能变化的数据分别采用不同的类型吗？
1. 类型名是以该类型所表示的现实世界实体为导向，而不是以编程语言类型为导向的吗？
1. 类型名的描述性足够强，可以帮助解释数据声明吗？
1. 你避免重新定义预定义类型吗？
1. 与简单地重定义一个类型相比，你考虑过创建一个新类吗？

## 13.2 要点
1. 结构体可以使得程序更简单、更容易理解，以及更容易维护
1. 每当你打算使用结构体的时候，考虑采用类是不是会工作得更好
1. 指针很容易出错。用访问器子程序或类以及防御式编程实践来保护自己的代码
1. 避免用全局变量，不只是因为它们很危险，还是因为你可以用其他更好的方法来取代它们
1. 如果你不得不使用全局变量，那么就通过访问器子程序来使用它。访问器子程序能为你带来全局变量所能带来的一切优点，还有一些额外好处


