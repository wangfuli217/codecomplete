# 16 控制循环
## 16.1 核对表
cc(控制循环){}
### 16.1.1 核对表：循环

__循环的选择和创建__
1. 在合适的情况下用while循环取代for循环了吗？
1. 循环是由内到外创建的吗？

__进入循环__
1. 是从循环头部进入的循环吗？
1. 初始化代码是直接位于循环前面吗？
1. 循环是无限循环或者事件循环吗？它的结构是是否清晰？
1. 避免使用像for i=1 to 9999这样的代码吗？
1. 如果这是一个C++、C或Java中的for循环，那么把循环头留给循环控制代码了吗？

__循环的内部__
1. 循环是否用了“{}”或其等价物来括上循环体，以防止因修改不当而出错吗？
1. 循环体内有内容吗？它是非空的吗？
1. 把内务处理集中地放在循环开始或者循环结束处了吗？
1. 循环像定义良好的子程序那样只执行了一件操作吗?
1. 循环短得足以一目了然吗？
1. 循环的嵌套层次不多于3层吗？
1. 把长循环的内容提取成单独的子程序吗？
1. 如果循环很长，那么它非常清晰吗？

__循环下标__
1. 如果这是一个for循环，那么其中的代码没有随意修改循环下标值？
1. 是否把重要的循环下标保存在另外的变量里，而不是在循环体外使用该循环下标？
1. 循环下标是序数类型(整数)或者枚举类型--而不是浮点类型吗？
1. 循环下标的名字有意义吗？
1. 循环避免了下标串话问题吗？

__退出循环__
1. 循环在所有可能的条件下都能终止吗？
1. 如果你建立了某种安全计数器标准，循环使用安全计数器了吗？
1. 循环的退出条件清晰吗？
1. 如果使用了break或者continue，那么它们用对了吗？

## 16.2 要点
1. 循环很复杂。保持循环简单将有助于别人阅读你的代码
1. 保持循环简单的技巧包括：避免使用怪异的循环、减少嵌套层次、让入口和出口一目了然、把内如操作代码放在一处
1. 循环下标很容易被滥用。因此命名要准确，并且要把它们各自仅用于一个用途
1. 仔细地考虑循环，确认它在每一种情况下都运行正常，并且在所有可能的条件下都能退出