1. 开始构建之前要做前期准备的绝对有力且简明的论据
    诉诸逻辑 :
    从管理者的角度看，做计划意味着确定项目所需要的时间、人数以及计算机台数。
    从技术角度讲，做计划意味着弄清楚你想要建造的是什么，以防止浪费钱去建造错误的东西。

    诉诸类比 : 程序员是软件食物链的最后一环。架构师吃掉需求，设计师吃掉架构，而程序员则消化设计。
    诉诸数据 : 缺陷在软件食物链里面呆的时间越长，它对食物链的后级造成损害就越严重。
    "老板就绪"测试
        我们最好立刻开始编码，因为将会有很多的调试工作需要做。
        我们并没有为测试安排太多的时间，因为将来不会发现多少缺陷。
        我们已经非常详细地研究了需求和设计，我想不出编码和调试期间还会遇到什么大问题。
        
    自我实现预言，是指当你对未来的行为或事件预测时，就会对你行为的互动改变很大，以至于产生预期的结果。
2. 辨明你所从事的软件的类型 P31
    不同种类的软件项目，需要在“准备工作”和“构建活动”之间做出不同的平衡。
    迭代方法往往能够减少“前期准备不足”造成的负面影响，但是它不能完全消除此影响。
    
3. 问题定义的先决条件
    在开始构建之前，首先要满足的一项先决条件就是对这个系统要解决的问题做出清楚的陈述。
    问题定义也被称作产品设想/product vision，
                    设想陈述/vision statement，
                    任务陈述/mission statement
                    产品定义/product definition。
    这里我们称它为问问题定义/problem definition
    
4. 需求的先决条件
    需求详细描述软件系统应该做什么，这是达成解决方案的第一步。需求活动也被称为需求开发/requirements development，
                                                                              需求分析/requirements analysis，
                                                                              分析/analysis，
                                                                              需求定义/requirements definition，
                                                                              软件需求/software requirements，
                                                                              规格书/specification，
                                                                              功能规格书/functional spec，
                                                                              规格/spec。
    理由很多，下面列出几点
    明确的需求可以保证是用户(而不是程序员)驾驭系统。如果需求不明确，程序员就会常常在编码时自行决定需求。明确的需求免得你去猜测用户想要的是什么。
    明确的需求有助于避免争论。如果你和另一个程序员去争执程序应该做什么，就可以查看书面的需求以解决分歧
    明确的需求有助于减少编程开发之后的系统变更情况。需求阶段引入的错误在编码阶段进行更改代价是巨大的。
    明确的需求是项目成功的关键，它有时甚至比有效的构建技术更为重要。
    
    核对表.txt
5. 架构的先决条件
    软件架构/software architecture 是软件设计的高层部分，是用于支撑更细节的设计的框架。
    架构也被成为系统架构/system architecture，
                高层设计/high-level design 或
                顶层设计/top-level design。
    通常会有一份独立的文档描述架构，这份文档成为架构规格书/architecture specification 或者顶层设计。
    有人会对架构和高层设计加以区分：架构是指适用于整个系统范围的设计约束，
                                    高层设计是指适用于子系统层级或多个类的层次上的设计约束。
    -> 好的架构使构建活动变得更容易，糟糕的架构则使构建活动变得寸步难行。
    -> 离开了良好的软件架构，你可能瞄准了正确的问题，但却使用了错误的解决方案，也许完全不可能有成功的构建。
    
    架构的组成部分 -> 记录那些曾经被考虑过得方案；
        程序组织 -> 系统架构首先要以概括的形式对有关关系做一个综述。
        主要的类 -> 详细定义所用的主要的类。它应该描述类的主要职责，以及该类与其他类的交互方式。
        数据设计 -> 所用到的文件和数据库表的设计，同样的，也应该描述曾经考虑过得设计方案并说明最终理由。
        业务规则 -> 如果架构依赖于特定的业务规则，那么久应该描述这些规则，并且描述这些规则对系统设计的影响。
        用户界面设计 -> 架构应该详细定义Web页面格式，GUI,命令行接口等主要元素。
        资源管理 -> 稀缺资源包括数据库连接，线程，句柄等，在内存受限的领域
        安全性 -> 实现设计层面和代码层面的安全性的方法。
            处理缓冲区的方法,处理非受信数据(用户输入的数据,cookies,配置文件,其他外部接口输入的数据)的规则，加密,错误处理消息的细致程序，包含内存中的密码数据。
        性能 -> 速度,内存,成本
        可伸缩性: 用户数量,服务数量,网络节点数量,数据库记录数,数据库记录的长度,交易量的增长
        互用性
        国际化/本地化
        输入/输出：
            详细定义读取策略(reading scheme)是先做(look-ahead),后做(look-behind)还是即使做(just-in-time)
            应该描述在哪一层检测IO错误：在字段,记录,流,或者文件的层次。
        错误处理 -> 
            错误处理常被视为是"代码约定层次 coding-convention-level"的事情。
            1. 错误处理是进行纠正还是仅仅只是检测？
            如果是纠正，程序可以尝试从错误中恢复过来。如果仅仅是检测，那么程序可以就像"没有发生任何事"一样继续运行，也可以退出。
            2. 错误检测是主动检测还是被动检测？ -> 前者可以扫清障碍，后者可以清除混乱。
            系统可以主动地预期错误 -- 例如，通过检查用户输入的有效性
            被动地响应错误 -- 例如，当用户输入的组合产生了一个数值溢出错误时。
            3. 程序如何传播错误？程序一旦检测到错误，它可以立刻丢弃引发错误的数据；也可以把这个错误当成一个错误，并进入错误处理状态
            或者可以等到所有处理完成，再通知用户说在某个地方发现了错误。
            4. 错误消息的处理有约定？如果架构没有详细定义一个一致的处理策略，那用户界面看起来就像"令人困惑的乱七八糟的抽象拼贴图"，
            由程序的不同部分的各种界面拼接而成。要避免这种外观体验，架构应该建立一套有关错误消息的约定
            5. 如何处理异常？何处可以抛出异常？何处可以捕获异常？如何记录异常？如何描述异常？
            架构应该规定代码何时能够抛出异常，在什么地方捕获异常，如何记录这些异常，以及如何在文档中描述异常，等等。
            6. 在程序的什么层次上处理错误？
            7. 每个类在验证其输入数据的有效性方面需要负何种责任？
               是每个类负责校验自己的数据还是有负责整个系统数据有效性校验的一组类？
               某个层次的类是否可以假设数据是干净的？
            8. 是希望使用语言或运行环境内置的错误处理机制还是建立一套自己的体制？
        容错性:容错是增强系统可靠性的一组技术，包括检测错误，如果可能的话从错误中恢复，否则则包容其不利影响。
        架构的可行性
        过度工程：健壮性是指系统在检测到错误后运行的能力，通常架构描述的系统要比需求描述的系统更健壮。
        关于"买"还是"造"的决策
        关于复用的决策
        变更策略
        架构的总体质量
