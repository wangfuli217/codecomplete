https://github.com/ygxqqx/collection/issues/12#issue-255141106
http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy

C 的第一条规则：如果能避免用C实现，就不要用C。 如果你必须要用C，你就必须要遵守C的最新规定。

<什么是“脚本语言”>
“脚本语言”与“非脚本语言”并没有语义上，或者执行方式上的区别。
“脚本语言”与“非脚本语言”的区别只在于它们设计的初衷：脚本语言的设计，
往往是作为一种临时的“补丁”。它的设计者并没有考虑把它作为一种“通用程序语言”，没有考虑用它构建大型的软件。
这些设计者往往没有经过系统的训练，有些甚至连最基本的程序语言概念都没搞清楚。相反，“非脚本”的通用程序语言，
往往由经过严格训练的专家甚至一个小组的专家设计，它们从一开头就考虑到了“通用性”，以及在大型工程中的可靠性和可扩展性。

<洞察力和经验>
# 洞察力就是透过现象看本质的能力。有洞察力的人很容易获得经验，然而有经验的人却不一定有洞察力
# 我反对不以现实为基础的“理想”，实际上那不叫理想，而只能叫做“空想”。
# 如何对待别人的代码 -> 我尽量不动它们


1. 反复推敲代码(去推敲，修改和提炼)
好的程序员，他们删掉的代码，比留下来的还要多很多。如果你看见一个人写了很多代码，却没有删掉多少，那他的代码一定有很多垃圾。

2. 写优雅的代码
优雅的代码看起来就像是一些整整齐齐，套在一起的盒子。
优雅的代码的逻辑大体上看起来，是枝丫分明的树状结构。
-> 优雅
if (...) {
  if (...) {
    ...
  } else {
    ...
  }
} else if (...) {
  ...
} else {
  ...
}
if语句几乎总是有两个分支。
if语句有可能嵌套，有多层的缩进，而且else分支里面有可能出现少量重复的代码。
然而这样的结构，逻辑却非常严密和清晰。
--------------------------------------------------------------------------------
C 允许静态自动分配初始化数组
uint32_t numbers[64];
memset(numbers, 0, sizeof(numbers));
-> 优化
uint32_t numbers[64] = {0};

--------------------------------------------------------------------------------
C 允许静态自动分配初始化结构体
struct thing {
    uint64_t index;
    uint32_t counter;
};

struct thing localThing;

void initThing(void) {
    memset(&localThing, 0, sizeof(localThing));
}
-> 优化
struct thing {
    uint64_t index;
    uint32_t counter;
};
struct thing localThing = {0};
重要提示：如果结构体有填充，{0} 将不能把多余的填充字节置为零。举例来说，stuct thing 在 counter 之后有4字节填充
(在64位平台)，因为结构体被按照字节大小来填充。如果需要使整个结构体置为零，包括未使用的填充字节，使用
 memset(&localThing, 0, sizeof(localThing))，因为sizeof(localThing) == 16 bytes，即使可寻址内容只有 8 + 4 = 12 bytes。

struct thing { uint64_t index; uint32_t counter; }; 
static const struct thing localThingNull = {0}; 
. . . 
struct thing localThing = {.counter = 3}; 
. . . 
localThing = localThingNull;

复合字面量允许你的编译器自动的创建临时匿名结构体，然后复制它们给一个目标值。
localThing = (struct thing){0};
--------------------------------------------------------------------------------
如果一个函数接受任意的输入数据和将要执行的长度，则不要限制参数类型。
void processAddBytesOverflow(uint8_t *bytes, uint32_t len) {
    for (uint32_t i = 0; i < len; i++) {
        bytes[0] += bytes[i];
    }
}
-> 优化
void processAddBytesOverflow(void *input, uint32_t len) {
    uint8_t *bytes = input;
    for (uint32_t i = 0; i < len; i++) {
        bytes[0] += bytes[i];
    }
}
函数的输入类型描述了代码的接口，而不是代码如何处理这些参数。

返回参数类型
C99 提供了强大的头文件 <stdbool.h>，其中定义了 true 是 1， false 是 0 。

3. 写模块化的代码
真正的模块化，并不是文本意义上的，而是逻辑意义上的。
以下几点:
    3.1 避免写太长的函数。如果发现函数太大了，就应该把它拆分成几个更小的。通常我写的函数长度都不超过40行。
    3.2 制造小的工具函数。为了内联而使用宏，其实是滥用了宏。
    3.3 每个函数只做一件简单的事情。
void foo() {
  if (getOS().equals("MacOS")) {
    a();
  } else {
    b();
  }
  c();
  if (getOS().equals("MacOS")) {
    d();
  } else {
    e();
  }
}
根据系统是否为“MacOS”来做不同的事情。
-> 优雅
两个函数：
void fooMacOS() {
  a();
  c();
  d();
}
和
void fooOther() {
  b();
  c();
  e();
}
--------------------------------------------------------------------------------
void foo() {
  a();
  b()
  c();
  if (getOS().equals("MacOS")) {
    d();
  } else {
    e();
  }
}
其中a()，b()，c()都是一样的，只有d()和e()根据系统有所不同。
-> 优雅
void preFoo() {
  a();
  b()
  c();

然后制造两个函数：
void fooMacOS() {
  preFoo();
  d();
}
和
void fooOther() {
  preFoo();
  e();
}
这样一来，既共享了代码，又做到了每个函数只做一件简单的事情。
--------------------------------------------------------------------------------
    3.4 避免使用全局变量和类成员(class member)来传递信息，尽量使用局部变量和参数。
class A {
  String x;

  void findX() {
     ...
     x = ...;
  }

  void foo() {
    findX();
    ...
    print(x);
  }
}
首先，他使用findX()，把一个值写入成员x。然后，使用x的值。这样，x就变成了findX和print之间的数据通道。
-> 优雅
String findX() {
   ...
   x = ...;
   return x;
}
void foo() {
  String x = findX();
  print(x);
}
局部变量而不是类成员来传递信息，那么这两个函数就不需要依赖于某一个class
--------------------------------------------------------------------------------

4. 写可读的代码
    4.1. 使用有意义的函数和变量名字。
    4.2. 局部变量应该尽量接近使用它的地方。
    4.3. 局部变量名字应该简短。
    4.4. 不要重用局部变量
String msg;
if (...) {
  msg = "succeed";
  log.info(msg);
} else {
  msg = "failed";
  log.info(msg);
}
-> 优化
if (...) {
  String msg = "succeed";
  log.info(msg);
} else {
  String msg = "failed";
  log.info(msg);
}
    4.5. 把复杂的逻辑提取出去，做成“帮助函数”。
// put elephant1 into fridge2
openDoor(fridge2);
if (elephant1.alive()) {
  ...
} else {
   ...
}
closeDoor(fridge2);
-> 优化
void put(Elephant elephant, Fridge fridge) {
  openDoor(fridge);
  if (elephant.alive()) {
    ...
  } else {
     ...
  }
  closeDoor(fridge);
}

这样原来的代码就可以改成：
...
put(elephant1, fridge2);
...
--------------------------------------------------------------------------------
    4.6. 把复杂的表达式提取出去，做成中间变量。
    像这样：(代码一行太长，而且嵌套太多，不容易看清楚)
Pizza pizza = makePizza(crust(salt(), butter()), 
                        topping(onion(), tomato(), sausage()));
-> 优化
Crust crust = crust(salt(), butter());
Topping topping = topping(onion(), tomato(), sausage());
Pizza pizza = makePizza(crust, topping);
--------------------------------------------------------------------------------
    4.7 在合理的地方换行
if (someLongCondition1() && someLongCondition2() && someLongCondition3() &&
  someLongCondition4()) {
  ...
}
-> 优化
if (someLongCondition1() &&
    someLongCondition2() &&
    someLongCondition3() &&
    someLongCondition4()) {
  ...
}
--------------------------------------------------------------------------------
log.info("failed to find file {} for command {}, with exception {}", file, command,
  exception);
-> 优化
log.info("failed to find file {} for command {}, with exception {}",
  file, command, exception);
    
--------------------------------------------------------------------------------
永远不要使用 malloc
尽量使用 calloc，获取零内存没有性能损失。
不像 malloc()，calloc() 可以检查整型溢出是它的一个优势，因为它会将其参数做乘法，以确认最终需要分配的内存大小。
#define mycalloc(N) calloc(1, N)。

    
5. 写简单的代码
    并不是语言提供什么，你就一定要把它用上的。实际上你只需要其中很小的一部分功能，
就能写出优秀的代码。我一向反对“充分利用”程序语言里的所有特性。
    5.1 避免使用自增减表达式（i++，++i，i--，--i）。
        特例: 一种是在for循环的update部分，比如for(int i = 0; i < 5; i++)
              一种情况是写成单独的一行，   比如i++;。
    5.2 永远不要省略花括号。很多语言允许你在某种情况下省略掉花括号
if (...)
    action1();
-> 优化
if (...){
    action1();
}
--------------------------------------------------------------------------------
    5.3 合理使用括号，不要盲目依赖操作符优先级。
2 << 7 - 2 * 3
->优化
(2 << 7) - (2 * 3)

    5.4 避免使用continue和break。循环语句（for，while）里面出现return是没问题的，
然而如果你使用了continue或者break，就会让循环的逻辑和终止条件变得复杂，难以确保正确。
while (condition1) {
  ...
  if (condition2) {
    break;
  }
}
-> 优化
while (condition1 && !condition2) {
  ...
}

6. 写直观的代码
Unix命令行有一种“巧妙”的写法是这样：
command1 && command2 && command3
    由于Shell语言的逻辑操作a && b具有“短路”的特性，如果a等于false，那么b就没必要执行了。
这就是为什么当command1成功，才会执行command2，当command2成功，才会执行command3。同样，

command1 || command2 || command3
    操作符||也有类似的特性。上面这个命令行，如果command1成功，那么command2和command3都不会被执行。
如果command1失败，command2成功，那么command3就不会被执行。

if (action1() || action2() && action3()) {
  ...
}
-> 优化
if (!action1()) {
  if (action2()) {
    action3();
  }
}
--------------------------------------------------------------------------------
7. 写无懈可击的代码 -> 通用思想：穷举所有的情况，不漏掉任何一个
if (...) {
  if (...) {
    ...
    return false;
  }
} else if (...) {
  ...
  return false;
}
return true;
-> 优化
if (...) {
  if (...) {
    ...
    return false;
  } else {
    return true;
  }
} else if (...) {
  ...
  return false;
} else {
  return true;
}
简洁，避免了重复，然而却很容易出现疏忽和漏洞。
--------------------------------------------------------------------------------
String s = "";
if (x < 5) {
  s = "ok";
}
-> 优化
String s;
if (x < 5) {
  s = "ok";
} else {
  s = "";
}
-> 优化
String s = x < 5 ? "ok" : "";

8. 正确处理错误
    8.1 这样写if语句的思路，其实包含了使代码可靠的一种通用思想：穷举所有的情况，不漏掉任何一个。
    8.2 忘记检查read的返回值是否为-1，觉得每次调用read都得检查返回值真繁琐，不检查貌似也相安无事。这种想法其实是很危险的。
    8.3 异常处理
String foo() throws MyException { # 任何调用foo的代码，必须对MyException作出合理的处理，才有可能确保程序的正确运行
  ...
}
这里MyException是一个错误返回。你可以认为这个函数返回一个union类型：{String, MyException} -> { 返回值, 异常值 }

把代码改成这样：
try {
  foo();
} catch (Exception e) {}
    或者最多在里面放个log，或者干脆把自己的函数类型上加上throws Exception，这样编译器就不再抱怨。
这些做法貌似很省事，然而都是错误的，你终究会为此付出代价。

    catch异常的时候，你不应该使用Exception这么宽泛的类型。你应该正好catch可能发生的那种异常A。
使用宽泛的异常类型有很大的问题，因为它会不经意的catch住另外的异常(比如B)。你的代码逻辑是
基于判断A是否出现，可你却catch所有的异常(Exception类)，所以当其它的异常B出现的时候，你的代码
就会出现莫名其妙的问题，因为你以为A出现了，而其实它没有。

--------------------------------------------------------------------------------
try { … } catch里面，应该包含尽量少的代码。比如，如果foo和bar都可能产生异常A，你的代码应该尽可能写成：

try {
  foo();
  bar();
} catch (A e) {...}
-> 优化
try {
  foo();
} catch (A e) {...}
try {
  bar();
} catch (A e) {...}


9. 正确处理null指针
穷举的思想是如此的有用，依据这个原理，我们可以推出一些基本原则，它们可以让你无懈可击的处理null指针。

    9.1 尽量不要产生null指针。尽量不要用null来初始化变量，函数尽量不要返回null。
如果你的函数要返回“没有”，“出错了”之类的结果，尽量使用Java的异常机制。

public String find() throws NotFoundException {
  if (...) {
    return ...;
  } else {
    throw new NotFoundException();
  }
}
Java的类型系统会强制你catch这个NotFoundException，所以你不可能像漏掉检查null一样，漏掉这种情况。

    Java的try…catch语法相当的繁琐和蹩脚，所以如果你足够小心的话，像find这类函数，
也可以返回null来表示“没找到”。这样稍微好看一些，因为你调用的时候不必用try…catch。
很多人写的函数，返回null来表示“出错了”，这其实是对null的误用。“出错了”和“没有”，
其实完全是两码事。“没有”是一种很常见，正常的情况，比如查哈希表没找到，很正常。
“出错了”则表示罕见的情况，本来正常情况下都应该存在有意义的值，偶然出了问题。
如果你的函数要表示“出错了”，应该使用异常，而不是null。
--------------------------------------------------------------------------------

    9.2 不要catch NullPointerException。函数里面不大小心，没检查null指针：

void foo() {
  String found = find();
  int len = found.length();
  ...
}

当foo调用产生了异常，他们不管三七二十一，就把调用的地方改成这样：

try {
  foo();
} catch (Exception e) {
  ...
}

这样当found是null的时候，NullPointerException就会被捕获并且得到处理。这其实是很错误的作法。
另外就算你写成catch (NullPointerException e)也是不可以的。由于foo的内部缺少了null检查，才出现了NullPointerException。
现在你不对症下药，倒把每个调用它的地方加上catch，以后你的生活就会越来越苦。
正确的做法应该是改动foo，而不改调用它的代码。foo应该被改成这样：
void foo() {
  String found = find();
  if (found != null) {
    int len = found.length();
    ...
  } else {
    ...
  }
}
在null可能出现的当时就检查它是否是null，然后进行相应的处理
--------------------------------------------------------------------------------

9.3 不要把null放进“容器数据结构”里面。
    解决方案是：如果你真要表示“没有”，那你就干脆不要把它放进去（Array，List，
Set没有元素，Map根本没那个entry），或者你可以指定一个特殊的，真正合法的对象，
用来表示“没有”。

9.4 函数调用者：明确理解null所表示的意义，尽早检查和处理null返回值，减少它的传播。
    null很讨厌的一个地方，在于它在不同的地方可能表示不同的意义。有时候它表示“没有”，
“没找到”。有时候它表示“出错了”，“失败了”。有时候它甚至可以表示“成功了”，…… 
这其中有很多误用之处，不过无论如何，你必须理解每一个null的意义，不能给混淆起来。

危险的写法：
public String foo() {
  String found = find();
  if (found == null) {
    return null;
  }
}
9.5 函数作者：明确声明不接受null参数，当参数是null时立即崩溃。不要试图对null进行“容错”，
不要让程序继续往下执行。如果调用者使用了null作为参数，那么调用者（而不是函数作者）
应该对程序的崩溃负全责。

它的定义很简单：
public static <T> T requireNonNull(T obj) {
  if (obj == null) {
    throw new NullPointerException();
  } else {
    return obj;
  }
}

9.6 使用@NotNull和@Nullable标记。IntelliJ提供了@NotNull和@Nullable两种标记，
加在类型前面，这样可以比较简洁可靠地防止null指针的出现。
    ntelliJ本身会对含有这种标记的代码进行静态分析，指出运行时可能出现NullPointerException的地方。
在运行时，会在null指针不该出现的地方产生IllegalArgumentException，即使那个null指针你从来没有deference。
这样你可以在尽量早期发现并且防止null指针的出现。

9.7 使用Optional类型。
    提供了一种叫Optional的类型。正确的使用这种类型，可以在很大程度上避免null的问题。
null指针的问题之所以存在，是因为你可以在没有“检查”null的情况下，“访问”对象的成员。



10. 防止过度工程
根据这些，我总结出来的防止过度工程的原则如下：
   1. 先把眼前的问题解决掉，解决好，再考虑将来的扩展问题。
   2. 先写出可用的代码，反复推敲，再考虑是否需要重用的问题。
   3. 先写出可用，简单，明显没有bug的代码，再考虑测试的问题。


10.1 过度工程即将出现的一个重要信号，就是当你过度的思考“将来”
10.2 另外一种过度工程的来源，是过度的关心“代码重用”。
10.3 过度地关心“测试”，也会引起过度工程。














